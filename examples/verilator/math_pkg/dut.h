#pragma once
// Common verilator test includes and helpers

#ifndef __PIPELINEC__
// Software C++ includes
// Generated by Verilator
#include "verilated.h"
#include "Vtop.h" 
// Names and helper macro generated by PipelineC tool
#include "pipelinec_verilator.h"

//#include <limits>
float rand_float(bool include_neg=true)
{
  int i = rand();
  float f = *((float*)(&i));
  if(include_neg && (rand()%2)) f *= -1;
  return f;
  //return -1.0 + static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(1.0-(-1.0))));
}
inline uint32_t float_31_0(float a) { union _noname { float f; uint32_t i;} conv; conv.f = a; return conv.i; }
inline float float_uint32(uint32_t a) { union _noname { float f; uint32_t i;} conv; conv.i = a; return conv.f; }
#endif

#define DUT_SET_INPUT(top, input_name) \
top->input_name = input_name;

#define DUT_SET_FLOAT_INPUT(top, input_name) \
top->input_name = float_31_0(input_name);

#define DUT_GET_OUTPUT(top, output_name) \
output_name = top->output_name;

#define DUT_GET_FLOAT_OUTPUT(top, output_name) \
output_name = float_uint32(top->output_name);

#define DUT_PRINT_FLOAT(f_val)\
printf(#f_val": float %e, uint32 0x%08X ", f_val, float_31_0(f_val));

#define DUT_RISING_EDGE(top) \
top->clk = 0;\
top->eval();\
top->clk = 1;\
top->eval();

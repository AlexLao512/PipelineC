// Serializable protocol for fosix syscalls
// Hacky direct packing and unpacking from byte arrays for now
// (as opposed to stream parsing)

#pragma once
#include "uintN_t.h"
#include "fosix.h"

// Message to pass between C on host and PipelineC on FPGA

// TODO make use of some autogenerated to/from bytes code...

#define FOSIX_MSG_SIZE 256 //4096 //16384
#define fosix_msg_size_t uint16_t
typedef struct fosix_msg_t
{
  uint8_t data[FOSIX_MSG_SIZE];
} fosix_msg_t;
fosix_msg_t FOSIX_MSG_T_NULL()
{
  fosix_msg_t rv;
  fosix_msg_size_t i;
  for(i=0;i<FOSIX_MSG_SIZE;i=i+1)
  {
    rv.data[i] = 0;
  }
  return rv;
}

// Stream version of message with valid flag
typedef struct fosix_msg_s
{
  fosix_msg_t data; // The message
  uint1_t valid;
} fosix_msg_s;
fosix_msg_s FOSIX_MSG_S_NULL()
{
  fosix_msg_s rv;
  rv.data = FOSIX_MSG_T_NULL();
  rv.valid = 0;
  return rv;
}

// Syscall table
#define syscall_t uint8_t
#define FOSIX_READ  0
#define FOSIX_WRITE 1
#define FOSIX_OPEN  2
#define FOSIX_CLOSE 3
#define FOSIX_UNKNOWN 255
// Byte[0] = Sycall ID
syscall_t decode_syscall_id(fosix_msg_t msg)
{
  syscall_t rv;
  rv = FOSIX_UNKNOWN;
  //printf("msg.data[0] = %d\n",msg.data[0]);
  if(msg.data[0]==FOSIX_READ)
  {
    rv = FOSIX_READ;
  }
  else if(msg.data[0]==FOSIX_WRITE)
  {
    rv = FOSIX_WRITE;
  }
  else if(msg.data[0]==FOSIX_OPEN)
  {
    rv = FOSIX_OPEN;
  }
  else if(msg.data[0]==FOSIX_CLOSE)
  {
    rv = FOSIX_CLOSE;
  }
  return rv;
}
fosix_msg_t apply_syscall_id(syscall_t id, fosix_msg_t msg)
{
  msg.data[0] = id;
  return msg;
}

// Bytes[1+] are specific to syscall

// OPEN REQ
fosix_msg_s open_req_to_msg(open_req_t req)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  msg_stream.data = apply_syscall_id(FOSIX_OPEN, msg_stream.data);
  msg_stream.valid = req.valid;  
  
  // Bytes[1-(FOSIX_PATH_SIZE-1+1)] are path
  fosix_size_t i;
  for(i=1; i<(FOSIX_PATH_SIZE+1); i=i+1)
  {
    msg_stream.data.data[i] = req.path[i-1];
  }
  
  return msg_stream;
}
open_req_t msg_to_open_req(fosix_msg_t msg)
{
  open_req_t req;
  req.valid = decode_syscall_id(msg) == FOSIX_OPEN;
  
  // Bytes[1-(FOSIX_PATH_SIZE-1+1)] are path
  fosix_size_t i;
  for(i=1; i<(FOSIX_PATH_SIZE+1); i=i+1)
  {
    req.path[i-1] = msg.data[i];
  }
  
  return req;
}

// OPEN RESP
open_resp_t msg_to_open_resp(fosix_msg_s msg_stream)
{
  open_resp_t resp;
  resp.valid = (decode_syscall_id(msg_stream.data) == FOSIX_OPEN) & msg_stream.valid;
  
  // Byte[1] = fildes
  resp.fildes = msg_stream.data.data[1];
  
  return resp;
}
fosix_msg_s open_resp_to_msg(open_resp_t resp)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  msg_stream.data = apply_syscall_id(FOSIX_OPEN, msg_stream.data);
  msg_stream.valid = resp.valid;
  
  // Byte[1] = fildes
  msg_stream.data.data[1] = resp.fildes;
  
  return msg_stream;  
}

// WRITE REQ
fosix_msg_s write_req_to_msg(write_req_t req)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  msg_stream.data = apply_syscall_id(FOSIX_WRITE, msg_stream.data);
  msg_stream.valid = req.valid;  
  
  // Byte[1] = fildes
  msg_stream.data.data[1] = req.fildes;
  // Byte[2] = nbyte
  msg_stream.data.data[2] = req.nbyte;
  // Byte[3-(FOSIX_BUF_SIZE-1+3)] = buf
  fosix_size_t i;
  for(i=3; i<(FOSIX_BUF_SIZE+3); i=i+1)
  {
    msg_stream.data.data[i] = req.buf[i-3];
  }
  
  return msg_stream;
}
write_req_t msg_to_write_req(fosix_msg_t msg)
{
  write_req_t req;
  req.valid = decode_syscall_id(msg) == FOSIX_WRITE;
  
  // Byte[1] = fildes
  req.fildes = msg.data[1];
  // Byte[2] = nbyte
  req.nbyte = msg.data[2];
  // Byte[3-(FOSIX_BUF_SIZE-1+3)] = buf
  fosix_size_t i;
  for(i=3; i<(FOSIX_BUF_SIZE+3); i=i+1)
  {
    req.buf[i-3] = msg.data[i];
  }
  
  return req;
}

// WRITE RESP
write_resp_t msg_to_write_resp(fosix_msg_s msg_stream)
{
  write_resp_t resp;
  resp.valid = (decode_syscall_id(msg_stream.data) == FOSIX_WRITE) & msg_stream.valid;
  
  // Byte[1] = nbyte
  resp.nbyte = msg_stream.data.data[1];
  
  return resp;
}
fosix_msg_s write_resp_to_msg(write_resp_t resp)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  msg_stream.data = apply_syscall_id(FOSIX_WRITE, msg_stream.data);
  msg_stream.valid = resp.valid;
  
  // Byte[1] = nbyte
  msg_stream.data.data[1] = resp.nbyte;
  
  return msg_stream;
}

// READ REQ
fosix_msg_s read_req_to_msg(read_req_t req)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  msg_stream.data = apply_syscall_id(FOSIX_READ, msg_stream.data);
  msg_stream.valid = req.valid;  
  
  // Byte[1] = fildes
  msg_stream.data.data[1] = req.fildes;
  // Byte[2] = nbyte
  msg_stream.data.data[2] = req.nbyte;
  
  return msg_stream;
}
read_req_t msg_to_read_req(fosix_msg_t msg)
{
  read_req_t req;
  req.valid = decode_syscall_id(msg) == FOSIX_READ;
  
  // Byte[1] = fildes
  req.fildes = msg.data[1];
  // Byte[2] = nbyte
  req.nbyte = msg.data[2];
  
  return req;
}

// READ RESP
read_resp_t msg_to_read_resp(fosix_msg_s msg_stream)
{
  read_resp_t resp;
  resp.valid = (decode_syscall_id(msg_stream.data) == FOSIX_READ) & msg_stream.valid;
  
  // Byte[1] = nbyte
  resp.nbyte = msg_stream.data.data[1];
  // Byte[2-(FOSIX_BUF_SIZE-1+2)] = buf
  fosix_size_t i;
  for(i=2; i<(FOSIX_BUF_SIZE+2); i=i+1)
  {
    resp.buf[i-2] = msg_stream.data.data[i];
  }
  
  return resp;
}
fosix_msg_s read_resp_to_msg(read_resp_t resp)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  msg_stream.data = apply_syscall_id(FOSIX_READ, msg_stream.data);
  msg_stream.valid = resp.valid;
  
  // Byte[1] = nbyte
  msg_stream.data.data[1] = resp.nbyte;
  // Byte[2-(FOSIX_BUF_SIZE-1+2)] = buf
  fosix_size_t i;
  for(i=2; i<(FOSIX_BUF_SIZE+2); i=i+1)
  {
    msg_stream.data.data[i] = resp.buf[i-2];
  }
  
  return msg_stream;
}

// CLOSE REQ
fosix_msg_s close_req_to_msg(close_req_t req)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  msg_stream.data = apply_syscall_id(FOSIX_CLOSE, msg_stream.data);
  msg_stream.valid = req.valid;  
  
  // Byte[1] = fildes
  msg_stream.data.data[1] = req.fildes;
  
  return msg_stream;
}
close_req_t msg_to_close_req(fosix_msg_t msg)
{
  close_req_t req;
  req.valid = decode_syscall_id(msg) == FOSIX_CLOSE;
  
  // Byte[1] = fildes
  req.fildes = msg.data[1];
  
  return req;
}

// CLOSE RESP
close_resp_t msg_to_close_resp(fosix_msg_s msg_stream)
{
  close_resp_t resp;
  resp.valid = (decode_syscall_id(msg_stream.data) == FOSIX_CLOSE) & msg_stream.valid;
  
  // Byte[1] = err
  resp.err = msg_stream.data.data[1];
  
  return resp;
}
fosix_msg_s close_resp_to_msg(close_resp_t resp)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  msg_stream.data = apply_syscall_id(FOSIX_CLOSE, msg_stream.data);
  msg_stream.valid = resp.valid;
  
  // Byte[1] = err
  msg_stream.data.data[1] = resp.err;
  
  return msg_stream;  
}

// C2H
fosix_proc_to_sys_t msg_to_request(fosix_msg_t msg)
{
  fosix_proc_to_sys_t req = POSIX_PROC_TO_SYS_T_NULL();
  req.sys_open.req  = msg_to_open_req(msg);
  req.sys_write.req = msg_to_write_req(msg);
  req.sys_read.req = msg_to_read_req(msg);
  req.sys_close.req = msg_to_close_req(msg);
  return req;  
}

// H2C
fosix_msg_s response_to_msg(fosix_sys_to_proc_t resp)
{
  fosix_msg_s msg_stream = FOSIX_MSG_S_NULL();
  if(resp.sys_open.resp.valid)
  {
    msg_stream = open_resp_to_msg(resp.sys_open.resp);
  }
  else if(resp.sys_write.resp.valid)
  {
    msg_stream = write_resp_to_msg(resp.sys_write.resp);
  }
  else if(resp.sys_read.resp.valid)
  {
    msg_stream = read_resp_to_msg(resp.sys_read.resp);
  }
  else if(resp.sys_close.resp.valid)
  {
    msg_stream = close_resp_to_msg(resp.sys_close.resp);
  }
  return msg_stream;
}

#pragma once
#include "xstr.h" // xstr func for putting quotes around macro things

// This file includes preprocessor helper hacks to help with/work around
// simple single and dual port generated RAM template functions that exist: 
// https://github.com/JulianKemmerer/PipelineC/wiki/Automatically-Generated-Functionality#rams

// Ideally this could all be autogenerated: https://github.com/JulianKemmerer/PipelineC/issues/121

#define RAM_INIT_INT_ZEROS "(others => (others => '0'))"

// Dual port, one read+write, one read only, 0 latency
#define DECL_RAM_DP_RW_R_0( \
  elem_t, \
  ram_name, \
  SIZE, \
  VHDL_INIT \
) \
typedef struct ram_name##_outputs_t \
{ \
  elem_t rd_data0; \
  elem_t rd_data1; \
}ram_name##_outputs_t; \
ram_name##_outputs_t ram_name( \
  uint32_t addr0, \
  elem_t wr_data0, uint1_t wr_en0, \
  uint32_t addr1 \
){ \
  __vhdl__("\n\
  constant SIZE : integer := " xstr(SIZE) "; \n\
  type ram_t is array(0 to SIZE-1) of " xstr(elem_t) "; \n\
  signal the_ram : ram_t := " VHDL_INIT "; \n\
begin \n\
  process(clk) \n\
  begin \n\
    if rising_edge(clk) then \n\
      if CLOCK_ENABLE(0)='1' then \n\
        if wr_en0(0) = '1' then \n\
          the_ram(to_integer(addr0)) <= wr_data0; \n\
        end if; \n\
      end if; \n\
    end if; \n\
  end process; \n\
  return_output.rd_data0 <= the_ram(to_integer(addr0)); \n\
  return_output.rd_data1 <= the_ram(to_integer(addr1)); \n\
"); \
}

// Triple port, two read only, one write only, 0 latency
#define DECL_RAM_TP_R_R_W_0( \
  elem_t, \
  ram_name, \
  SIZE, \
  VHDL_INIT \
) \
typedef struct ram_name##_out_t \
{ \
  elem_t rd_data0; \
  elem_t rd_data1; \
}ram_name##_out_t; \
ram_name##_out_t ram_name( \
  uint32_t rd_addr0, \
  uint32_t rd_addr1, \
  uint32_t wr_addr, elem_t wr_data, uint1_t wr_en \
){ \
  __vhdl__("\n\
  constant SIZE : integer := " xstr(SIZE) "; \n\
  type ram_t is array(0 to SIZE-1) of " xstr(elem_t) "; \n\
  signal the_ram : ram_t := " VHDL_INIT "; \n\
begin \n\
  process(clk) \n\
  begin \n\
    if rising_edge(clk) then \n\
      if CLOCK_ENABLE(0)='1' then \n\
        if wr_en(0) = '1' then \n\
          the_ram(to_integer(wr_addr)) <= wr_data; \n\
        end if; \n\
      end if; \n\
    end if; \n\
  end process; \n\
  return_output.rd_data0 <= the_ram(to_integer(rd_addr0)); \n\
  return_output.rd_data1 <= the_ram(to_integer(rd_addr1)); \n\
"); \
}

#!/usr/bin/env python3
# -*- coding: utf-8 -*- 

import argparse
import os
import sys
sys.dont_write_bytecode = True

import C_TO_LOGIC
import SYN
import MODELSIM
import C_TO_FSM

# Defaults
default_c_file = C_TO_LOGIC.REPO_ABS_DIR() + "/main.c"

# Parse args
parser = argparse.ArgumentParser(description="PipelineC:")
parser.add_argument("c_file", type=str, default=default_c_file, nargs="?",
                    help=f"C file containing main functions. Default is {default_c_file}.")
parser.add_argument("--out_dir", type=str, default=None,
                    help=f"Output directory. Default is a new directory inside the current directory.")
parser.add_argument("--coarse", help="Do only a single coarse grain autopipelining sweep (as opposed to default of several multi-level coarse sweeps).", action="store_true")
parser.add_argument("--sim_comb", help="Start simulation using just comb. logic versions of functions.", action="store_true")
parser.add_argument("--sim", help="Start simulation using final (maybe autopipelined) versions of functions.", action="store_true")             
args = parser.parse_args()

# Resolve C file arg
c_file = os.path.abspath(args.c_file)

# Apply arguments to global modules

# Output dir:
#   Use what user provided
#   Or create a new dir for each run by default
if args.out_dir is not None:
  SYN.SYN_OUTPUT_DIRECTORY = os.path.abspath(args.out_dir)
else:
  # Or create a unique dir for this run in current dir
  c_filename = os.path.basename(c_file)
  SYN.SYN_OUTPUT_DIRECTORY = os.path.abspath("./" + SYN.OUTPUT_DIR_NAME + "_" + c_filename + "_" + str(os.getpid()))

print("""
██████╗ ██╗██████╗ ███████╗██╗     ██╗███╗   ██╗███████╗ ██████╗
██╔══██╗██║██╔══██╗██╔════╝██║     ██║████╗  ██║██╔════╝██╔════╝
██████╔╝██║██████╔╝█████╗  ██║     ██║██╔██╗ ██║█████╗  ██║     
██╔═══╝ ██║██╔═══╝ ██╔══╝  ██║     ██║██║╚██╗██║██╔══╝  ██║     
██║     ██║██║     ███████╗███████╗██║██║ ╚████║███████╗╚██████╗
╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝
""", flush=True)

# No need to scare folks with my big dumb todo list printing...
"""
TODO:
Make clk style func subrountines in same func single isnt
Point to point wires per instances? need pragma to 'name next func inst' (otherrwise impossible since instances arent user names)
Detect/document function types ...ex. Detect single instance funcs and record logic.is_single_inst, maybe need to add pragmas to specify/force
Implement DIAMOND PNR run?
Do announcement of some sort for __clk()
  Do video demo? guitar i2s audio visualizer of some sort?
Do more basic tutorials like nandland+hdlbits
Shared 'external' module use? implies arbitration? user arb func?
Put a risc(v? CHIPS2.0?) core (in pipelinec) along side accelerator in pipeline, + host OS on FOSIX NoC
Implement break; in clk step style?
How does multiple ins and out over time work in clk step style?  (not hdl wrapper)
First refactor fosix stuff:
  do demo 1b wide data bus
    ^ something stream based + varable length not uart fixed msg size
  Do DVI over HDMI video demo driven from NoC element (instead of VGA?)
Make any modules with constant inputs that inst fully reduceable a renamed func with consts inside?
  Hacky sort of const prop across module boundaries? ew?
  ^Try to optimize/reduce var ref of all const inputs except mux value into constants-inside module version explicit 'LUT' module
  Do const func args as generics - ex. const loop vars into func - how to progate const values?
File level modules? extern? pragmas for ports with sub-MAIN funcs. for two-func clock crossing 'instance of a file-module' - how to do clk crossing instances? macros? hah
MAIN pragmas that take hier names/namesspaces -   main.multiclkdomain1 ?
Static locals inside {} with #pragma global or something? infer state reg submodule ports into and out of {}, etc
^Allow mix of volatile and non-volatile globals by isolating logic using globals (with {}?) (as is done now by putting in other global func)?
volatile static FEEDBACK makes sense just like regular vol static - just removes reg
Only syn modules that are used in modules that need pipelining (will need pipeline map of delay)

Check auto pipeline and clock crossing read+write behavior
  Need to re-do clock crossings/wires used in pipelineable logic to be like volatiles reading inputs always in stage 0, outputs from last stage
  ^ Mostly already true for no-flow control crossings in functions with no other inputs and outputs, clock crossings are the io (and no issue for 0clk comb functions)
Fix idenfiying C AST nodes with coord+hash - need to know full parent tree nodes path
Do MNIST example with minmal resource usage and then scale up. Even smallest single pipelines are huge.
CANNOT PROPOGATE CONSTANTS through all compound references (structs, arrays) - can sometimes if have recent constant assignments/ref toks
Make reset module for Arty
Rust AST? rustc -Z ast-json, traverse the json? Do minimum viable?
Aetherling style re/unrolling of logic into different timings/util
Do BROM support
FP checks/fixes:
  Zero special case (only needed for mult?)
  Fix shifts in FP operators to check for shfiting more than number of bits
Put modelsim files all in syn out dir, not in cwd from launching tool (w/ reset of modelsim proj files)
Do write up on one or two optimizations to DKs riscv
Parallelize sweeps better - aws support?
Fix fine grain sweep to work again after coarse/middle out sweep
Do CASE statements
Let __vhdl__ (and wrapping func pragmad) be used to describe comb logic that plus IO regs the syn tool will auto pipeline
Nexus try to beat Wolfs results. try retiming, try area opt setting, target identical fpga parts VU9P (different die) gets consistently worse results than VU33P or VU13P
Set write-back/'volatile feedback'? connection markers in code that make volatiles work like CPU pipeline feedback to specific stages C code labels and gotos?
Long code with lots of ifs is slow because of deep copy of if logic graph branches - fix
Sanity check signed mult you POS
Come on do sanity check for reserved words
Multiple reads on globals var / global wires? is maybe OK? ordering of global writes and reads a problem?
Add pragmas for syn tool command lines options
Finish chipscope+virtual io debug thing (write probes) + add w/ pass through regular streaming uart io?
^Full board arty example using ddr, sw,leds, uart for debug+stream, etc
Continue completing clock crossing features, tool support (volatile/pipelined logic wires w/ clock enable double check)
Try small python ast parsing based example - Pypeline?
How to remove excess io regs from middle out sweep?
Redo and examine pipelining of basic c ops n cycle G/LT/E is known problem - write in PipelineC?
^ Maybe redo pipelined binary trees instead of equal bit sequential stages? Bad for slicing.. probably can work, test
Gen flattened slv top level ports, w/ internal type conversions -W.
NO its good - syn like multiplies with common truncation for better timing estimations - ENSURE built in operations have resize() on outputs if user casts down
Karatsuba algo for mult - need to recursive gen big mult funcs for differing bit widths
Check for non global functions that call global functions when evaluating const
^ Dont store timing params for zero clocks - no timing params assumed default, save ram, probably faster might not need to do below.
Parallelize parsing of func def bodies since indepdent of other func def bodies?
Reorg ref tok cover checking and removal (collapsing,etc too?) into tree based data struct
Look into intermediate representation such FIRRTL (what Yosys uses?) instead, eventually get rid of VHDL...
OPTIMIZE AWAY CONSTANTs: do as easy c ast manip? mult by 1 or neg 1, mult by 2^n and div by 2^n, (floats and ints!) I dont want to be a compiler
Solve AWS multithreaded off by one or two problem...
Support AWS PCIM port - need to write kernel driver and maybe user space wrapper?
Add constant defintion (struct+array init), use const keyword? #define init expressions? Init becomes like const ref funcs assigning ref toks
Relative/'local' clock crossings - not absolute specified in main/pragmas? Can point at any non-single-inst function to run in requested relative clock...?
Expose latencies of each instance as a constant for use in external vhdl package - not for use in pipelinec code
Fix for vhdl restricted words. Append _restricted?
Fix to remove useless int casts, ex. uint32->uint32 and do casts of ints as vhdl expr not funcs
Do auto gen unsigned to array functions now that support array_N_t
CONST REF intern gen code: Use gcc array init instead of for loop many const ref tok assignments that are bulky?
Add timing info via syn top level without flatten, then report timing on each module? No IO regs so will paths make sense? / doesnt work for combinatorial logic? Hah syn weird top level with _top version of everything?
When doing const ref read with many ref toks, make new 'assignment' alias of new reduced wire so future reads of the same const ref can use the single wire
Add look ahead for built in functions so cast can be inferred
Remove RESOLVE_CONST_ARRAY_REF from C_AST_REF_TO_TOKENS, and max var ref / var assignement optimize to const ref and const assignment... complicated...
Consider doing constant optimization as second pass (faster than current way of optimizing as part of first pass?)? How to unroll const for-loop then?
Pragmas for reset stuff, tag global regs for reset, special clock domain handling stuff with PLL lock and such?
Allow resource reuse if can 2x,3x,etc clock a pipeline to accomplish the same 1x,II=1 pipeline task (II<1 means down clocking by 2,3, etc?)
Try big const ref funcs (not vhdl expr) in modules instead of all in one file where used? removes repeated code for faster elab?
Built in raw vhdl funcs for array copy / manipulation instead of many const rek tok loops. Built in funcs can return arrays (handled internally) but user can write such funcs  uint8*4_t[N/4] = uint8_arrayN_by_4_le(uint8_t x[N])
Auto gen <func_name>_t type which is inputs to function func(x,y,z)  struct <func_name>_t {x,y,z}
Syn each pipeline stage ... this is hard... like slicing zero clock logic 
Uh ceil log2 stuff doesnt work for huge consts determining bit width in python? 0x800000000000008b
Const SR/SL as vhdl funcs instead of modules..thought this was done...
Progate constants through constant bit manip, ex. uint32_uint1_31
Redo old code to use for loops instead of generated code (ex. float div)
Document fundamental time v.s space trade off (sum example?)
Explore logic level / LUT based optimizations
Extern keyword for (same-clock?) clock crossings?
Allow values form code into __vhdl__ funcs (vhdl isnt entire module) like printf support?
Use yosys ltp of primitives in longest topological path for faster initial estimates?
General pipelineable with IO regs if used in pure func RAM_SP_RF func
Optimize away static consts that look like regs w init values - allow local init of 'const' vars?
Explore Vivado's retiming option - thought it was on by default... it isnt because it seem beneficial <20% of the time?
Explore Vivado's report_pipeline_analysis instead of following timing reports
Fix not to write empty vhdl io reg processes for void() mains for clock cross ports only
Try not allowing add/sub of certain slow bits per stage -> need to syn all the adders and prioritize
Next not-fine sweep? Cant just blindly slice into pieces - do insertion based on chunks of delay for slice-able (not fixed,global) modules
Have multiple paths reported per clock domain/main func
No good? reason to combine variable latency array of regs for pipelining and state regs in same record - flat, human like, easier to read (maybe ok since those regs arent IO?)
Compiler pass to make sequences ex. ORS, into binary trees
Add auto switch between inferred and fabric mult, etc?
Do more DSP prim functions ideally with backing fabric c code for if on different device
Do built in Q number types
Propogate null values for constant folding
Could make an undefined/Xs constant only meaningful in synthesis
Fix needing type+name info in clock crossing via two auto gen header includes, array N type .h and clock crossing .h for name
Uused recent game thing as example rewritten in clk style? hard? boring to go back
Default dont put IO regs around single inst funcs in mid out sweep?
"""

print("Output directory:", SYN.SYN_OUTPUT_DIRECTORY)
print("================== Parsing C Code to Logical Hierarchy ================================", flush=True)

# Do parsing
print("Parsing:",c_file, flush=True)
parser_state = C_TO_LOGIC.PARSE_FILE(c_file)
print("================== Writing Resulting Logic to File ================================", flush=True)
C_TO_LOGIC.WRITE_0CLK_FINAL_FILES(parser_state)

# Here is a good point to check basic single cycle/comb logic functionality before pipelining
MODELSIM.DO_OPTIONAL_DEBUG(args.sim_comb)
  
print("================== Adding Timing Information from Synthesis Tool ================================", flush=True)
parser_state = SYN.ADD_PATH_DELAY_TO_LOOKUP(parser_state)

print("================== Beginning Throughput Sweep ================================", flush=True)
multimain_timing_params = SYN.DO_THROUGHPUT_SWEEP(parser_state, coarse_only=(args.coarse is True))

print("================== Writing Results of Throughput Sweep ================================", flush=True)
SYN.WRITE_FINAL_FILES(multimain_timing_params, parser_state)
print("Done.", flush=True)

# Start simulation on final VHDL
MODELSIM.DO_OPTIONAL_DEBUG(args.sim)


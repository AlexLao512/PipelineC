#!/usr/bin/env python3
# -*- coding: utf-8 -*- 

import os
import sys
sys.dont_write_bytecode = True

import C_TO_LOGIC
import SYN
import MODELSIM

print('''
██████╗ ██╗██████╗ ███████╗██╗     ██╗███╗   ██╗███████╗ ██████╗
██╔══██╗██║██╔══██╗██╔════╝██║     ██║████╗  ██║██╔════╝██╔════╝
██████╔╝██║██████╔╝█████╗  ██║     ██║██╔██╗ ██║█████╗  ██║     
██╔═══╝ ██║██╔═══╝ ██╔══╝  ██║     ██║██║╚██╗██║██╔══╝  ██║     
██║     ██║██║     ███████╗███████╗██║██║ ╚████║███████╗╚██████╗
╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝
''', flush=True)

# No need to scare folks with my big dumb todo list printing...
'''
TODO:
Need to re-do clock crossings/wires used in pipelineable logic to be like volatiles reading inputs always in stage 0, outputs from last stage
^ Mostly already true for no-flow control crossings in functions with no other inputs and outputs, clock crossings are the io (and no issue for 0clk comb functions)
Do MNIST example with minmal resource usage and then scale up. Even smallest single pipelines are huge.
Set write-back/'volatile feedback'? connection markers in code that make volatiles work like CPU pipeline feedback to specific stages C code labels and gotos?
Antikernel fun?
Silice fun?
Infer dsps somehow - will want to infer based on * operator, 
^ Generally need to have switch between RAW_VHDL implementations (hard macros of complex functions) and C code fabric implementations of those funcs
^ and need to make up built in dsp functions for other, MAC, like functions
^ + WITH REAL C code implementations for non-dsp-using-in-fabric (like * not sliced)
Copy libfixmath Q16.16 fixed point look for arbitrary widths?
Sanity check signed mult you POS
Come on do sanity check for reserved words
Make MAIN_MHZ allow not yet defined funcs for mhz values later
Multiple reads on globals var / global wires? is maybe OK? ordering of global writes and reads a problem?
Finish chipscope+virtual io debug thing (write probes) + add w/ pass through regular streaming uart io?
^Full board arty example using ddr, sw,leds, uart for debug+stream, etc
Continue completing clock crossing features, tool support (volatile/pipelined logic wires w/ clock enable double check)
Try small python ast parsing based example - Pypeline? haha
Fix bug of not being able to include auto gen headers in auto gend files
Detect/document function types ...ex. Detect single instance / NO-CONDTIONAL|clock en funcs and record logic.is_single_inst, maybe need to add pragmas to specify/force
Document pragmas
File level modules for two-func clock crossing 'instance of a file-module' - how to do clk crossing instances? macros? hah
Static locals inside {} with #pragma global or something? infer state reg submodule ports into and out of {}, etc
^Allow mix of volatile and non-volatile globals by isolating logic using globals (with {}?) (as is done now by putting in other global func)?
Do a simple RISCV? cpu? But avoid just doing RTL clone?
Reorg global logic detection/rounding from bottom up instead of trying multiple times to slice from top down.
Fix fine grain sweep to work again
Redo and examine pipelining of basic c ops n cycle G/LT/E is known problem - write in PipelineC?
^ Maybe redo pipelined binary trees instead of equal bit sequential stages? Bad for slicing.. probably can work, test
Gen flattened slv top level ports, w/ internal type conversions -W.
Karatsuba algo for mult - need to recursive gen big mult funcs for differing bit widths
Check for non global functions that call global functions when evaluating const
^ Dont store timing params for zero clocks - no timing params assumed default, save ram, probably faster might not need to do below.
Parallelize parsing of func def bodies since indepdent of other func def bodies?
Reorg ref tok cover checking and removal (collapsing,etc too?) into tree based data struct
Do hacky if generate with pragmas? oh gosh
Rust AST? rustc -Z ast-json, traverse the json?
Look into intermediate representation such FIRRTL (what Yosys uses?) instead, eventually get rid of VHDL...
OPTIMIZE AWAY CONSTANTs: do as easy c ast manip? mult by 1 or neg 1, mult by 2^n and div by 2^n, (floats and ints!) I dont want to be a compiler
Solve AWS multithreaded off by one or two problem...
Support AWS PCIM port - need to write kernel driver and maybe user space wrapper?
Add constant defintion (struct+array init), use const keyword? #define init expressions? Init becomes like const ref funcs assigning ref toks
How to do module instantiation? Does that need to be macro based? #define to set 'generics'?
Relative/'local' clock crossings - not absolute specified in main/pragmas? Can point at any non-single-inst function to run in requested relative clock...?
Fix for vhdl restricted words. Append _restricted?
Do auto gen unsigned to array functions now that support array_N_t
Use gcc array init instead of for loop many const ref tok assignments that are bulky?
Add timing info via syn top level without flatten, then report timing on each module? No IO regs so will paths make sense? / doesnt work for combinatorial logic? Hah syn weird top level with _top version of everything?
When doing const ref read with many ref toks, make new 'assignment' alias of new reduced wire so future reads of the same const ref can use the single wire
Yo dummy dont make built in operations have resize() on outputs, output determined by inputs only
Add look ahead for built in functions so cast can be inferred
Remove RESOLVE_CONST_ARRAY_REF from C_AST_REF_TO_TOKENS, and max var ref / var assignement optimize to const ref and const assignment... complicated...
Consider doing constant optimization as second pass (faster than current way of optimizing as part of first pass?)? How to unroll const for-loop then?
Pragmas for reset stuff, tag global regs for reset, special clock domain handling stuff with PLL lock and such?
Maybe can implement variable time loops as PipelineC state machines?? Weird idea Andrew
Allow resource reuse if can 2x,3x,etc clock a pipeline to accomplish the same 1x,II=1 pipeline task (II<1 means down clocking by 2,3, etc?)
CANNOT PROPOGATE CONSTANTS through compound references (structs, arrays)
Try big const ref funcs (not vhdl expr) in modules instead of all in one file where used? removes repeated code for faster elab?
Built in raw vhdl funcs for array copy / manipulation instead of many const rek tok loops. Built in funcs can return arrays (handled internally) but user can write such funcs  uint8*4_t[N/4] = uint8_arrayN_by_4_le(uint8_t x[N])
Auto gen <func_name>_t type which is inputs to function func(x,y,z)  struct <func_name>_t {x,y,z}
Syn each pipeline stage ... this is hard... like slicing zero clock logic 
Uh ceil log2 stuff doesnt work for huge consts determining bit width in python? 0x800000000000008b
Const SR/SL as vhdl funcs instead of modules..thought this was done...
Progate constants through constant bit manip, ex. uint32_uint1_31
Redo old code to use for loops instead of generated code (ex. float div)
Document fundamental time v.s space trade off (sum example?)
Explore logic level / LUT based optimizations
Extern keyword for (same-clock?) clock crossings?
'''
print("Output directory:", SYN.SYN_OUTPUT_DIRECTORY)
print("================== Parsing C Code to Logical Hierarchy ================================", flush=True)
# TODO real command line opts
c_file = C_TO_LOGIC.REPO_ABS_DIR() + "/main.c"
if len(sys.argv) == 2:
  # Assume first and only arg is c_file
  c_file = sys.argv[1]
# Resolve C file to absolute path
c_file = os.path.abspath(c_file) 
print("Parsing:",c_file, flush=True)
parser_state = C_TO_LOGIC.PARSE_FILE(c_file)

print("================== Writing Resulting Logic to File ================================", flush=True)
C_TO_LOGIC.WRITE_0CLK_FINAL_FILES(parser_state)
  
print("================== Adding Timing Information from Synthesis Tool ================================", flush=True)
parser_state = SYN.ADD_PATH_DELAY_TO_LOOKUP(parser_state)

# TODO uncomment + ask for other simulation support if needed
#print("================== Doing Optional Modelsim Debug ================================", flush=True)
#MODELSIM.DO_OPTIONAL_DEBUG(False)

print("================== Beginning Throughput Sweep ================================", flush=True)
multimain_timing_params = SYN.DO_THROUGHPUT_SWEEP(parser_state)

print("================== Writing Results of Throughput Sweep ================================", flush=True)
SYN.WRITE_FINAL_FILES(multimain_timing_params, parser_state)
print("Done.", flush=True)

